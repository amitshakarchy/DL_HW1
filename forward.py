import numpy as np


def initialize_parameters(layer_dims):
    """
    :param layer_dims: an array of the dimensions of each layer in the network
    :return: a dictionary containing the initialized W and b parameters of each layer
    """
    # Special parameters initializations for ReLU layers (also worked good for us with softmax layer)
    params = {f'W{i + 1}': np.random.randn(layer_dims[i + 1], layer_dims[i]) * np.sqrt(2 / layer_dims[i]) for i in
              range(len(layer_dims) - 1)}
    params.update({f'b{i + 1}': np.zeros((layer_dims[i + 1], 1)) for i in range(len(layer_dims) - 1)})

    return params


def linear_forward(A, W, b):
    """
    linear part of a layer's forward propagation.
    :param A: the activations of the previous layer
    :param W: the weight matrix of the current layer (of shape [size of current layer, size of previous layer])
    :param b: the bias vector of the current layer (of shape [size of current layer, 1])
    :return Z: the linear component of the activation function
    :return linear_cache: a dictionary containing A, W, b
    """
    Z = np.matmul(W, A) + b
    linear_cache = {'A_prev': A, 'W': W, 'b': b}
    return Z, linear_cache


def softmax(Z):
    """
    :param Z: the linear component of the activation function
    :return A: the activations of the layer
    :return activation_cache: returns Z, which will be useful for the backpropagation
    """

    exp = np.exp(Z)
    A = exp / np.sum(exp, axis=0)[None, :]
    return A, {'Z': Z}


def safe_softmax(Z):
    Z_safe = Z - Z.max(axis=0)
    return softmax(Z_safe)[0], {'Z': Z}


def relu(Z):
    """
    :param Z: the linear component of the activation function
    :return A: the activations of the layer
    :return activation_cache: returns Z, which will be useful for the backpropagation
    """

    def relu_func(zi):
        return np.maximum(0., zi)

    relu_func = np.vectorize(relu_func)
    A =  relu_func(Z)
    return A, {'Z': Z}


def linear_activation_forward(A_prev, W, B, activation):
    """
    Implement the forward propagation for the LINEAR->ACTIVATION layer
    :param A_prev: activations of the previous layer
    :param W: the weights matrix of the current layer
    :param B: the bias vector of the current layer
    :param activation: the activation function to be used (a string,     either “softmax” or “relu”)
    :return A: the activations of the current layer
    :return cache: a joint dictionary containing both linear_cache and activation_cache
    """
    Z, linear_cache = linear_forward(A_prev, W, B)
    A_cur, activation_cache = relu(Z) if activation == 'relu' else safe_softmax(Z)

    return A_cur, {**linear_cache, **activation_cache}


def L_model_forward(X, parameters, use_batchnorm):
    """
    Implement forward propagation for the [LINEAR->RELU]*(L-1)->LINEAR->SOFTMAX computation
    :param X: the data, numpy array of shape (input size, number of examples)
    :param parameters: the initialized W and b parameters of each layer
    :param use_batchnorm: a boolean flag used to determine whether to apply batchnorm after the activation
    :return AL: the last post-activation value
    :return caches: a list of all the cache objects generated by the linear_forward function
    """
    num_layers = len(parameters) // 2
    activations = ['relu']*(num_layers-1) + ['softmax']

    A_prev = X
    A_i = None
    caches = []
    for layer_i in range(1, num_layers + 1):
        W_i = parameters[f'W{layer_i}']
        b_i = parameters[f'b{layer_i}']
        activation_function = activations[layer_i-1]

        A_i, lin_cache_i = linear_activation_forward(A_prev, W_i, b_i, activation_function)
        caches.append(lin_cache_i)
        A_i = apply_batchnorm(A_i) if use_batchnorm and activation_function != 'softmax' else A_i
        A_prev = A_i

    return A_i, caches


def compute_cost(AL, Y):
    """
    the cost function defined by equation
    :param AL:  probability vector corresponding to your label predictions, shape (num_of_classes, number of examples)
    :param Y: the labels vector (i.e. the ground truth)
    :return cost: the cross-entropy cost
    """
    m = len(AL[0])
    cost = (-1 / m) * (Y * np.log(AL)).sum()
    return cost


def apply_batchnorm(A):
    """
    performs batchnorm on the received activation values of a given layer.
    :param A: the activation values of a given layer
    :return NA: the normalized activation values, based on the formula learned in class
    """

    epsilon = 0.000000001  # prevent dividing by zero
    mu = np.average(A, axis=1)
    mu = np.expand_dims(mu, axis=1)
    variance = np.var(A, axis=1) + epsilon
    variance = np.expand_dims(variance, axis=1)
    A_norm = (A - mu) / np.sqrt(variance)

    return A_norm
